{"version":3,"file":"static/js/874.e8e177c5.chunk.js","mappings":"qNAIIA,EAAkB,WACpB,SAAAA,EAAYC,IAASC,EAAAA,EAAAA,GAAA,KAAAF,IACnBG,EAAAA,EAAAA,GAAiBC,KAAMH,GACvBG,KAAKC,aAAcC,EAAAA,EAAAA,GAAYF,KAAM,cAAe,GAIpDA,KAAKG,MAAQ,GAIbH,KAAKI,UAAW,CAClB,CA0CI,OA1CHC,EAAAA,EAAAA,GAAAT,EAAA,EAAAU,IAAA,oBAAAH,MACD,WACEH,KAAKO,aACP,GAAC,CAAAD,IAAA,uBAAAH,MACD,WACEH,KAAKQ,uBACP,GAAC,CAAAF,IAAA,sBAAAH,MACD,SAAoBM,GAClBT,KAAKG,MAAQM,EAAMC,OACnBV,KAAKC,YAAYU,KAAKF,EAAMC,OAC9B,GAAC,CAAAJ,IAAA,UAAAM,IACD,WACE,OAAOC,MAAMC,KAAKd,KAAKe,GAAGC,iBAAiB,gCAC7C,GAAC,CAAAV,IAAA,mBAAAH,MACD,WACEH,KAAKO,cACLP,KAAKQ,uBACP,GACA,CAAAF,IAAA,cAAAH,MAGA,WAAc,IAAAc,EAAA,KACZjB,KAAKkB,QAAQC,SAAQ,SAAAC,GACLA,EAAOC,aAAa,WACxBJ,EAAKd,MAAQiB,EAAOE,aAAa,WAAY,QAAUF,EAAOG,gBAAgB,WAC1F,GACF,GACA,CAAAjB,IAAA,wBAAAH,MAGA,WAAwB,IAAAqB,EAAA,KACtBxB,KAAKkB,QAAQC,SAAQ,SAAAC,GACnBI,EAAKpB,SAAWgB,EAAOE,aAAa,WAAY,QAAUF,EAAOG,gBAAgB,WACnF,GACF,GAAC,CAAAjB,IAAA,SAAAH,MACD,WACE,OAAQsB,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,CAAEC,MAAO,yBAA0BF,EAAAA,EAAAA,GAAE,OAAQ,MAC/D,GAAC,CAAAnB,IAAA,KAAAM,IACD,WAAW,OAAOgB,EAAAA,EAAAA,GAAW5B,KAAO,IAAC,EAAAM,IAAA,WAAAM,IACrC,WAAwB,MAAO,CAC7B,MAAS,CAAC,qBACV,SAAY,CAAC,wBACZ,KAAChB,CAAA,CAtDgB,GAwDtBA,EAAmBiC,MA1DW,uN","sources":["../node_modules/@didomi/ui-atoms/dist/esm/didomi-toggle-button.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-371c2d7e.js';\n\nconst didomiToggleButtonCss = \".didomi-toggle-button{--_toggle-br:20px;align-items:center;background-color:#f9fafa;border-radius:var(--_toggle-br);border:1px solid #c9dfe8;display:inline-flex}.didomi-toggle-button[disabled]{filter:grayscale(1)}\";\n\nlet DidomiToggleButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.valueChange = createEvent(this, \"valueChange\", 7);\n    /**\n     * The value of the toggle-button\n     */\n    this.value = '';\n    /**\n     * Whether toggle button should be disabled\n     */\n    this.disabled = false;\n  }\n  handleValueChange() {\n    this.markOptions();\n  }\n  handleDisabledChange() {\n    this.setDisabledForOptions();\n  }\n  handleOptionClicked(event) {\n    this.value = event.detail;\n    this.valueChange.emit(event.detail);\n  }\n  get options() {\n    return Array.from(this.el.querySelectorAll('.didomi-toggle-button-option'));\n  }\n  componentDidLoad() {\n    this.markOptions();\n    this.setDisabledForOptions();\n  }\n  /**\n   * Iterate through options and mark them as selected or not\n   */\n  markOptions() {\n    this.options.forEach(option => {\n      const value = option.getAttribute('value');\n      value === this.value ? option.setAttribute('selected', 'true') : option.removeAttribute('selected');\n    });\n  }\n  /**\n   * Iterate through options and mark them as disabled or not\n   */\n  setDisabledForOptions() {\n    this.options.forEach(option => {\n      this.disabled ? option.setAttribute('disabled', 'true') : option.removeAttribute('disabled');\n    });\n  }\n  render() {\n    return (h(Host, { class: \"didomi-toggle-button\" }, h(\"slot\", null)));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"handleValueChange\"],\n    \"disabled\": [\"handleDisabledChange\"]\n  }; }\n};\nDidomiToggleButton.style = didomiToggleButtonCss;\n\nexport { DidomiToggleButton as didomi_toggle_button };\n"],"names":["DidomiToggleButton","hostRef","_classCallCheck","registerInstance","this","valueChange","createEvent","value","disabled","_createClass","key","markOptions","setDisabledForOptions","event","detail","emit","get","Array","from","el","querySelectorAll","_this","options","forEach","option","getAttribute","setAttribute","removeAttribute","_this2","h","Host","class","getElement","style"],"sourceRoot":""}