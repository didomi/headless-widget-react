{"version":3,"file":"static/js/8776.09ae721c.chunk.js","mappings":"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","sources":["../node_modules/@didomi/ui-atoms/dist/esm/didomi-color-picker-input.entry.js","../node_modules/@didomi/ui-atoms/dist/esm/keyboardValue-d30b2be3.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-371c2d7e.js';\nimport { K as KeyboardValue } from './keyboardValue-d30b2be3.js';\nimport { g as generateUniqueId, i as inheritAttributes, c as createComponentWithPrefix } from './utils-0574000f.js';\nimport { P as PopperOverlay } from './popperOverlay-5341d24d.js';\n\nconst didomiColorPickerInputCss = \".didomi-color-picker-input{display:block}.didomi-color-picker-input__label{display:block;overflow:hidden;width:32px;height:32px;border-radius:50%;padding:3px;background:#ffffff;border:1px solid #668a99;cursor:pointer}.didomi-color-picker-input__circle{width:100%;height:100%;border-radius:50%;overflow:hidden}.didomi-color-picker-input__field{width:81px;padding-bottom:4px}.didomi-color-picker-input__illustration{border-radius:50%;overflow:hidden}\";\n\nlet ColorPickerInput = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.valueChange = createEvent(this, \"valueChange\", 7);\n    /**\n     * A set of attributes to pass down to the real html component.\n     */\n    this.inheritedAttributes = {};\n    /**\n     * The placement of the floating input (default = `top-start`).\n     */\n    this.placement = 'top-end';\n    this.inputId = `didomi-color-picker-id-${generateUniqueId()}`;\n    /**\n     * Determents if a string is a valid color.\n     */\n    this.isValidColor = strColor => {\n      // We are using the option constructor to check if the `value` is a valid color.\n      // If we assign `style.color` to invalid value, will get an empty when we check the color.\n      const s = new Option().style;\n      s.color = strColor;\n      return s.color !== '';\n    };\n    this.handleColorChange = (ev) => {\n      ev.stopPropagation();\n      this.value = ev.target.value;\n      if (this.isColorValid) {\n        this.valueChange.emit(this.value);\n      }\n    };\n    this.handleBlur = (event) => {\n      // This is because popper.js try to remove an element that is already removed and throws and error.\n      // This error breaks the React app.\n      setTimeout(() => {\n        if (!event.detail) {\n          this.closeColorPicker();\n        }\n      });\n    };\n    this.handleMouseEnter = () => {\n      this.openColorPicker(false);\n    };\n    this.handleMouseLeave = () => {\n      if (!this.shouldStayOpen) {\n        this.closeColorPicker();\n      }\n    };\n    this.openColorPicker = (shouldFocusInput = true) => {\n      if (!this.popperOverlay.isOpen()) {\n        this.popperOverlay.open();\n      }\n      if (shouldFocusInput) {\n        this.inputRef.querySelector('input').focus();\n        this.inputRef.querySelector('input').select();\n        this.shouldStayOpen = true;\n      }\n    };\n    this.closeColorPicker = () => {\n      if (this.popperOverlay.isOpen()) {\n        this.popperOverlay.close();\n        this.shouldStayOpen = false;\n      }\n    };\n    this.handleKeyDown = (ev) => {\n      if (ev.key === KeyboardValue.Enter || ev.key === KeyboardValue.Space) {\n        ev.preventDefault();\n        this.openColorPicker(true);\n      }\n    };\n    this.handleInputKeyDown = (ev) => {\n      if (ev.key === KeyboardValue.Enter) {\n        ev.preventDefault();\n        this.closeColorPicker();\n        this.shouldStayOpen = false;\n      }\n    };\n  }\n  valueChanged(value) {\n    this.updateColorValidity(value);\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n  componentDidLoad() {\n    this.updateColorValidity(this.value);\n    this.popperOverlay = new PopperOverlay(this.el.querySelector('.didomi-color-picker-input__label'), this.inputRef, null, {\n      placement: this.placement,\n      strategy: 'fixed',\n      modifiers: [\n        {\n          options: {\n            altAxis: true,\n            padding: 4,\n          },\n        },\n      ],\n    });\n  }\n  disconnectedCallback() {\n    this.popperOverlay.destroy();\n  }\n  updateColorValidity(value) {\n    this.isColorValid = this.isValidColor(value);\n  }\n  render() {\n    const DidomiTextInput = createComponentWithPrefix('didomi-text-input', this.el.tagName);\n    const DidomiIllustration = createComponentWithPrefix('didomi-illustration', this.el.tagName);\n    const hostClass = {\n      '': true,\n    };\n    const circleStyle = {\n      backgroundColor: this.value,\n    };\n    return (h(Host, { class: hostClass }, h(\"label\", { class: \"didomi-color-picker-input__label\", htmlFor: this.inputId, tabIndex: 0, onClick: () => this.openColorPicker(), onKeyDown: this.handleKeyDown, onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave }, this.isColorValid ? (h(\"div\", { class: \"didomi-color-picker-input__circle\", style: circleStyle })) : (h(DidomiIllustration, { name: \"transparent-background-grid\", class: \"didomi-color-picker-input__illustration\" }))), h(DidomiTextInput, Object.assign({}, this.inheritedAttributes, { \"aria-haspopup\": \"true\", ref: ref => (this.inputRef = ref), class: \"didomi-color-picker-input__field\", id: this.inputId, type: \"text\", size: \"xs\", value: this.value, hideErrorMessage: true, onInput: this.handleColorChange, onFocusChange: this.handleBlur, onKeyDown: this.handleInputKeyDown }))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueChanged\"]\n  }; }\n};\nColorPickerInput.style = didomiColorPickerInputCss;\n\nexport { ColorPickerInput as didomi_color_picker_input };\n","var KeyboardValue;\n(function (KeyboardValue) {\n  KeyboardValue[\"Enter\"] = \"Enter\";\n  KeyboardValue[\"Escape\"] = \"Escape\";\n  KeyboardValue[\"Space\"] = \" \";\n})(KeyboardValue || (KeyboardValue = {}));\n\nexport { KeyboardValue as K };\n"],"names":["ColorPickerInput","hostRef","_this","_classCallCheck","registerInstance","this","valueChange","createEvent","inheritedAttributes","placement","inputId","concat","generateUniqueId","isValidColor","strColor","s","Option","style","color","handleColorChange","ev","stopPropagation","value","target","isColorValid","emit","handleBlur","event","setTimeout","detail","closeColorPicker","handleMouseEnter","openColorPicker","handleMouseLeave","shouldStayOpen","shouldFocusInput","arguments","length","undefined","popperOverlay","isOpen","open","inputRef","querySelector","focus","select","close","handleKeyDown","key","KeyboardValue","preventDefault","handleInputKeyDown","_createClass","updateColorValidity","inheritAttributes","el","PopperOverlay","strategy","modifiers","options","altAxis","padding","destroy","_this2","DidomiTextInput","createComponentWithPrefix","tagName","DidomiIllustration","circleStyle","backgroundColor","h","Host","class","htmlFor","tabIndex","onClick","onKeyDown","onMouseEnter","onMouseLeave","name","Object","assign","ref","id","type","size","hideErrorMessage","onInput","onFocusChange","get","getElement"],"sourceRoot":""}