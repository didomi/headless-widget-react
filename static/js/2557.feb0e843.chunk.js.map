{"version":3,"file":"static/js/2557.feb0e843.chunk.js","mappings":"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","sources":["../node_modules/@didomi/ui-atoms/dist/esm/didomi-modal.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-371c2d7e.js';\nimport { a as addDataSuffix, g as generateUniqueId, b as createOverlayPortal, d as destroyOverlayPortal, c as createComponentWithPrefix } from './utils-0574000f.js';\nimport { c as createFocusTrap } from './focus-trap.esm-1346aedd.js';\n\nconst didomiModalCss = \".didomi-modal{display:none}.didomi-overlay-container .didomi-modal-backdrop{display:flex;width:100vw;height:100vh;position:fixed;left:0px;top:0px;justify-content:center;align-items:center;background-color:rgba(29, 65, 83, 0.9);overflow:auto}.didomi-overlay-container .didomi-modal-backdrop .didomi-modal-card{max-width:600px;display:flex;flex-direction:column;align-items:center;text-align:center;width:100%;padding:64px;border-radius:16px;box-sizing:border-box;background-color:#ffffff;box-shadow:0px 34px 60px 0px rgba(0, 0, 0, 0.15);position:relative;margin:32px;transform:scale(0.95);transition:transform 600ms cubic-bezier(0.165, 0.84, 0.44, 1)}.didomi-overlay-container .didomi-modal-backdrop .didomi-modal-card.didomi-modal-card-slim{padding:56px;max-width:460px;margin:16px}.didomi-overlay-container .didomi-modal-backdrop .didomi-modal-card-close{position:absolute;top:0;right:0;padding:16px}.didomi-overlay-container .didomi-modal-backdrop .didomi-modal-card-opened{transform:scale(1)}\";\n\nlet DidomiModal = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.openChange = createEvent(this, \"openChange\", 7);\n    /**\n     * Shows and hides the modal. Set to true to show.\n     */\n    this.isOpen = false;\n    /**\n     * If permanent is true, the modal would not be closed when clicking outside of it.\n     */\n    this.permanent = false;\n    /**\n     * Whether focus should be returned to the element that had focus before modal activation.\n     */\n    this.returnFocusAfterClose = true;\n    /**\n     * If closable is true, the modal display a close icon on the top right.\n     */\n    this.closable = false;\n    /**\n     * Variation of the modal\n     */\n    this.variant = 'main';\n    /**\n     * Propagates the data attributes regardless if the modal is opened or not\n     */\n    this.setDataAttributes = () => {\n      const container = this.isOpen ? this.openedModal : this.el;\n      addDataSuffix(this.el, container.querySelector('.didomi-modal-card-close .didomi-icon-button'), 'close-button');\n    };\n    /**\n     * Create a focus trap (you can only focus within) for the modal\n     * If the permanent flag is set we don't allow to close the modal by clicking outside or pressing Escape\n     * The trap must have an initial focus, which is set to the last button of the actions, if no button is provided it defaults to the modal\n     */\n    this.setUpFocusTrap = () => {\n      let lastButton;\n      const modalCard = (this.el.querySelector('.didomi-modal-card') ||\n        document.body.querySelector(`.didomi-overlay-container #${this.openModalId} .didomi-modal-card`));\n      if (!modalCard)\n        return;\n      if (!this.initialFocus) {\n        const modalButtons = Array.from(modalCard.querySelectorAll('button'));\n        lastButton = modalButtons[modalButtons.length - 1];\n      }\n      this.focusTrap = createFocusTrap([modalCard], {\n        allowOutsideClick: this.permanent,\n        clickOutsideDeactivates: !this.permanent,\n        initialFocus: this.initialFocus || lastButton,\n        fallbackFocus: modalCard,\n        returnFocusOnDeactivate: this.returnFocusAfterClose,\n        onDeactivate: () => {\n          if (!this.permanent) {\n            this.close();\n          }\n        },\n      });\n    };\n    /**\n     * Floating elements (eg dropdown), need to be included in the focus trap.\n     * If you open a new dropdown, the dropdown list would be place in the overlay container, outside\n     * the modal content. Because the modal content is trapped you would not be able to focus the dropdown list.\n     * Here we listen to any change in the overlay container and if a new item was added/removed we updated the focus\n     * trap elements so that you can both only focus the modal and the overlay elements\n     */\n    this.observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.type === 'childList') {\n          const overlayContainer = document.body.querySelector(`.didomi-overlay-container`);\n          const floatingElements = Array.from(overlayContainer.children);\n          const floatingElementsButTheModal = floatingElements.filter(el => !el.classList.contains('didomi-modal-backdrop'));\n          this.focusTrap.updateContainerElements([...floatingElementsButTheModal, this.openedModal]);\n        }\n      });\n    });\n    /**\n     * Opens the modal.\n     * It creates an overlay for modal (moves it to the overlay container) with a custom id so that it can't be duplicate\n     * with any existing opened modal. It then activates the focus trap so that it can only be focus within the modal, and\n     * starts listening for new overlay elements so that they can also be included in the focus trap.\n     * It emits an event with the open state and add's the proper class for the modal animation.\n     */\n    this.openModal = () => {\n      var _a, _b, _c;\n      if (this.openedModal) {\n        // Modal already opened.\n        return;\n      }\n      const modal = this.el.querySelector('.didomi-modal-backdrop');\n      modal.style.padding = '24px';\n      const modalCard = modal === null || modal === void 0 ? void 0 : modal.querySelector('.didomi-modal-card');\n      modalCard.style.maxHeight = '100%';\n      modalCard.style.overflow = 'auto';\n      this.openModalId = `didomi-modal-${generateUniqueId()}`;\n      modal === null || modal === void 0 ? void 0 : modal.setAttribute('id', this.openModalId);\n      createOverlayPortal(modal, this.attachTo);\n      (_a = this.focusTrap) === null || _a === void 0 ? void 0 : _a.activate();\n      const overlayContainer = document.body.querySelector(`.didomi-overlay-container`);\n      if (overlayContainer) {\n        (_b = this.observer) === null || _b === void 0 ? void 0 : _b.observe(overlayContainer, { childList: true });\n      }\n      this.openChange.emit(true);\n      (_c = modalCard === null || modalCard === void 0 ? void 0 : modalCard.classList) === null || _c === void 0 ? void 0 : _c.add('didomi-modal-card-opened');\n    };\n    /**\n     * Closes the modal.\n     * It destroys the overlay, deactivates the focus trap and emit the corresponding event.\n     */\n    this.closeModal = () => {\n      var _a, _b, _c;\n      const overlayContainer = document.body.querySelector(`.didomi-overlay-container`);\n      const modalCard = overlayContainer.querySelector('.didomi-modal-backdrop .didomi-modal-card');\n      (_a = modalCard === null || modalCard === void 0 ? void 0 : modalCard.classList) === null || _a === void 0 ? void 0 : _a.remove('didomi-modal-card-opened');\n      destroyOverlayPortal(this.openModalId, this.el);\n      this.openModalId = undefined;\n      this.openChange.emit(false);\n      (_b = this.focusTrap) === null || _b === void 0 ? void 0 : _b.deactivate();\n      (_c = this.observer) === null || _c === void 0 ? void 0 : _c.disconnect();\n    };\n    this.handleCloseClicked = () => {\n      this.close();\n    };\n  }\n  openChanged(newOpen) {\n    if (newOpen) {\n      this.openModal();\n    }\n    else {\n      this.closeModal();\n    }\n  }\n  permanentChanged() {\n    this.setUpFocusTrap();\n    this.focusTrap.activate();\n  }\n  initialFocusChanged() {\n    this.setUpFocusTrap();\n    this.focusTrap.activate();\n  }\n  /**\n   * Opens the modal.\n   */\n  async open() {\n    this.isOpen = true;\n  }\n  /**\n   * Closes the modal.\n   */\n  async close() {\n    this.isOpen = false;\n  }\n  disconnectedCallback() {\n    if (this.isOpen) {\n      this.close();\n    }\n  }\n  componentDidLoad() {\n    this.setUpFocusTrap();\n    if (this.isOpen) {\n      this.openModal();\n    }\n  }\n  componentDidRender() {\n    // Because the modal is dynamically updated outside the component (in the overlay) we ensure the data attributes are set at the end of the flow\n    // so that the icon button is present in the DOM.\n    setTimeout(() => this.setDataAttributes(), 0);\n  }\n  /**\n   * Returns the modal that's inside the overlay section\n   * @returns {HTMLElement} the modal\n   */\n  get openedModal() {\n    return document.body.querySelector(`.didomi-overlay-container #${this.openModalId}`);\n  }\n  render() {\n    const DidomiIconButton = createComponentWithPrefix('didomi-icon-button', this.el.tagName);\n    return (h(Host, { class: \"didomi-modal\" }, h(\"div\", { class: \"didomi-modal-backdrop\" }, h(\"div\", { class: { 'didomi-modal-card': true, 'didomi-modal-card-slim': this.variant === 'slim' } }, this.closable && (h(\"div\", { class: \"didomi-modal-card-close\" }, h(DidomiIconButton, { variant: \"rounded\", icon: \"close-cancel\", onClick: this.handleCloseClicked }))), h(\"slot\", null)))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"isOpen\": [\"openChanged\"],\n    \"permanent\": [\"permanentChanged\"],\n    \"initialFocus\": [\"initialFocusChanged\"]\n  }; }\n};\nDidomiModal.style = didomiModalCss;\n\nexport { DidomiModal as didomi_modal };\n"],"names":["DidomiModal","hostRef","_this","_classCallCheck","registerInstance","this","openChange","createEvent","isOpen","permanent","returnFocusAfterClose","closable","variant","setDataAttributes","container","openedModal","el","addDataSuffix","querySelector","setUpFocusTrap","lastButton","modalCard","document","body","concat","openModalId","initialFocus","modalButtons","Array","from","querySelectorAll","length","focusTrap","createFocusTrap","allowOutsideClick","clickOutsideDeactivates","fallbackFocus","returnFocusOnDeactivate","onDeactivate","close","observer","MutationObserver","mutations","forEach","mutation","type","overlayContainer","floatingElementsButTheModal","children","filter","classList","contains","updateContainerElements","_toConsumableArray","openModal","_a","_b","_c","modal","style","padding","maxHeight","overflow","generateUniqueId","setAttribute","createOverlayPortal","attachTo","activate","observe","childList","emit","add","closeModal","remove","destroyOverlayPortal","undefined","deactivate","disconnect","handleCloseClicked","_createClass","key","value","newOpen","_open","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","_close","_callee2","_context2","_this2","setTimeout","get","DidomiIconButton","createComponentWithPrefix","tagName","h","Host","class","icon","onClick","getElement"],"sourceRoot":""}