{"version":3,"file":"static/js/3090.b714480d.chunk.js","mappings":"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","sources":["../node_modules/@didomi/ui-atoms/dist/esm/didomi-drawer.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-371c2d7e.js';\nimport { c as createFocusTrap } from './focus-trap.esm-1346aedd.js';\nimport { g as generateUniqueId, b as createOverlayPortal, d as destroyOverlayPortal, i as inheritAttributes, c as createComponentWithPrefix } from './utils-0574000f.js';\n\nconst didomiDrawerCss = \".didomi-drawer{display:none}.didomi-drawer-container{height:100vh;inset:0;position:fixed;width:100vw}.didomi-drawer-backdrop{background-color:rgba(158, 189, 203, 0.1);inset:0;opacity:0;position:absolute;transition:opacity var(--drawer-animation-duration)}.didomi-drawer-panel{--panel-left-padding:60px;background-color:#fffbf9;border-left:1px solid #ffd5c8;box-shadow:-4px 0px 8px 0px rgba(0, 0, 0, 0.05);box-sizing:border-box;display:flex;flex-direction:column;gap:50px;height:calc(100vh - var(--drawer-panel-top-offset, 0));padding:64px 8px 88px 0;position:absolute;right:-100%;top:var(--drawer-panel-top-offset, 0);transition:right var(--drawer-animation-duration) ease-out;width:573px}.didomi-drawer-close-btn{color:#1d4153;position:absolute;right:40px;top:40px}.didomi-drawer-container[data-is-active] .didomi-drawer-panel{right:0}.didomi-drawer-container[data-is-active] .didomi-drawer-backdrop{opacity:1}\";\n\nconst DRAWER_ANIMATION_DURATION = 600;\nlet DidomiDrawer = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.close = createEvent(this, \"close\", 7);\n    this.drawerId = `didomi-drawer-${generateUniqueId()}`;\n    this.inheritedAttributes = {};\n    /**\n     * Shows and hides the drawer.\n     */\n    this.isOpen = false;\n    /**\n     * Create a focus trap (you can only focus within) for the drawer\n     */\n    this.setUpFocusTrap = () => {\n      this.focusTrap = createFocusTrap([this.drawerContainer], {\n        // Handle Escape key pressed\n        onDeactivate: this.emitClose,\n        initialFocus: this.initialFocus,\n      });\n    };\n    this.emitClose = () => {\n      this.close.emit();\n    };\n    this.openDrawer = () => {\n      this.setPanelOffset();\n      createOverlayPortal(this.drawerContainer);\n      this.focusTrap.activate();\n    };\n    this.closeDrawer = () => {\n      var _a;\n      // Wait for the animation to end before destroying the portal\n      setTimeout(() => {\n        destroyOverlayPortal(this.drawerId, this.el);\n      }, DRAWER_ANIMATION_DURATION);\n      (_a = this.focusTrap) === null || _a === void 0 ? void 0 : _a.deactivate();\n    };\n    this.setPanelOffset = () => {\n      let panelTopOffset = 0;\n      if (this.panelVisualContainer) {\n        const visualContainer = document.querySelector(this.panelVisualContainer);\n        const boundingClientRect = visualContainer === null || visualContainer === void 0 ? void 0 : visualContainer.getBoundingClientRect();\n        panelTopOffset = (boundingClientRect === null || boundingClientRect === void 0 ? void 0 : boundingClientRect.top) || 0;\n      }\n      this.drawerContainer.style.setProperty('--drawer-panel-top-offset', panelTopOffset + 'px');\n    };\n  }\n  openChanged(isOpen) {\n    if (isOpen) {\n      this.openDrawer();\n    }\n    else {\n      this.closeDrawer();\n    }\n  }\n  initialFocusChanged() {\n    this.setUpFocusTrap();\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label', 'aria-description', 'aria-labelledby', 'aria-describedby']);\n  }\n  componentDidLoad() {\n    this.setUpFocusTrap();\n    if (this.isOpen) {\n      this.openDrawer();\n    }\n  }\n  disconnectedCallback() {\n    if (this.isOpen) {\n      this.closeDrawer();\n    }\n  }\n  render() {\n    const DidomiIconButton = createComponentWithPrefix('didomi-icon-button', this.el.tagName);\n    return (h(Host, { class: \"didomi-drawer\" }, h(\"div\", Object.assign({ id: this.drawerId, class: \"didomi-drawer-container\", \"data-is-active\": this.isOpen, ref: ref => (this.drawerContainer = ref), style: { '--drawer-animation-duration': DRAWER_ANIMATION_DURATION + 'ms' }, role: \"dialog\", \"aria-modal\": \"true\" }, this.inheritedAttributes), h(\"div\", { class: \"didomi-drawer-backdrop\", onClick: this.emitClose }), h(\"div\", { class: \"didomi-drawer-panel\" }, h(DidomiIconButton, { class: \"didomi-drawer-close-btn\", variant: \"rounded\", icon: \"close-cancel\", onClick: this.emitClose }), h(\"slot\", null)))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"isOpen\": [\"openChanged\"],\n    \"initialFocus\": [\"initialFocusChanged\"]\n  }; }\n};\nDidomiDrawer.style = didomiDrawerCss;\n\nexport { DidomiDrawer as didomi_drawer };\n"],"names":["DidomiDrawer","hostRef","_this","_classCallCheck","registerInstance","this","close","createEvent","drawerId","concat","generateUniqueId","inheritedAttributes","isOpen","setUpFocusTrap","focusTrap","createFocusTrap","drawerContainer","onDeactivate","emitClose","initialFocus","emit","openDrawer","setPanelOffset","createOverlayPortal","activate","closeDrawer","_a","setTimeout","destroyOverlayPortal","el","deactivate","panelTopOffset","panelVisualContainer","visualContainer","document","querySelector","boundingClientRect","getBoundingClientRect","top","style","setProperty","_createClass","key","value","inheritAttributes","_this2","DidomiIconButton","createComponentWithPrefix","tagName","h","Host","class","Object","assign","id","ref","DRAWER_ANIMATION_DURATION","role","onClick","variant","icon","get","getElement"],"sourceRoot":""}