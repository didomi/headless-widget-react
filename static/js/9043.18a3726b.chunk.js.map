{"version":3,"file":"static/js/9043.18a3726b.chunk.js","mappings":"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","sources":["../node_modules/@didomi/ui-atoms/dist/esm/didomi-header-illustration.entry.js"],"sourcesContent":["import { r as registerInstance, h, a as Host, g as getElement } from './index-371c2d7e.js';\n\n/**\n * A cache for the illustration content\n */\nconst didomiHeaderIllustrationContent = new Map();\n/**\n * A cache for network requests to fetch the illustrations\n */\nconst requests = new Map();\n/**\n * Gets the SVG content from a URL. Fetches the file, and saves it into a cache\n * If the SVG was already in the cache it returns it from there without fetching\n * @param url URL of the SVG to download\n * @return The SVG content\n */\nconst getSvgContent = (url) => {\n  // see if we already have a request for this url\n  let req = requests.get(url);\n  if (!req) {\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n      // we don't already have a request\n      req = fetch(url).then(rsp => {\n        if (rsp.ok) {\n          return rsp.text().then(svgContent => {\n            svgContent = validateContent(svgContent);\n            didomiHeaderIllustrationContent.set(url, svgContent || '');\n          });\n        }\n        didomiHeaderIllustrationContent.set(url, '');\n      });\n      // cache for the same requests\n      requests.set(url, req);\n    }\n    else {\n      // set to empty for ssr scenarios and resolve promise\n      didomiHeaderIllustrationContent.set(url, '');\n      return Promise.resolve();\n    }\n  }\n  return req;\n};\n/**\n * Validates that the SVG content is a valid SVG element\n * @param svgContent The SVG content\n * @return The SVG content\n */\nconst validateContent = (svgContent) => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\n/**\n * Ensures an HTML content is valid to avoid security attacks\n * @param elm The HTML content\n * @return True if valid, false if not\n */\nconst isValid = (elm) => {\n  /* istanbul ignore else */\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const val = elm.attributes[i].value;\n      if (typeof val === 'string' && val.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst didomiHeaderIllustrationCss = \":host{display:inline-block;box-sizing:content-box !important}:host .header-illustration-inner{display:flex}:host(.flip-rtl) .illustration-inner{transform:scaleX(-1)}\";\n\nlet DidomiHeaderIllustration = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.isVisible = false;\n    /**\n     * If enabled, didomi-header-illustration will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    this.lazy = false;\n  }\n  connectedCallback() {\n    // purposely do not return the promise here because loading\n    // the svg file should not hold up loading the app\n    // only load the svg if it's visible\n    this.waitUntilVisible(this.el, '30px', () => {\n      this.isVisible = true;\n      this.loadIllustration();\n    });\n  }\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  waitUntilVisible(el, rootMargin, cb) {\n    if (this.lazy && typeof window !== 'undefined' && window.IntersectionObserver) {\n      const io = (this.io = new window.IntersectionObserver((data) => {\n        if (data[0].isIntersecting) {\n          io.disconnect();\n          this.io = undefined;\n          cb();\n        }\n      }, { rootMargin }));\n      io.observe(el);\n    }\n    else {\n      // browser doesn't support IntersectionObserver\n      // so just fallback to always show it\n      cb();\n    }\n  }\n  loadIllustration() {\n    if (this.isVisible && this.name) {\n      const url = `https://uilib.didomi.io/assets/header-illustrations/${this.name}.svg`; // https://uilib.didomi.io/assets will be replaced at build time check stencil.config.ts\n      getSvgContent(url).then(() => (this.svgContent = didomiHeaderIllustrationContent.get(url)));\n      if (!this.ariaLabel && this.ariaHidden !== 'true') {\n        const label = this.name;\n        // user did not provide a label\n        // come up with the label based on the illustration name\n        if (label) {\n          this.ariaLabel = label.replace(/\\-/g, ' ');\n        }\n      }\n    }\n  }\n  render() {\n    return (h(Host, { name: this.name, role: \"img\" }, this.svgContent ? h(\"div\", { class: \"header-illustration-inner\", innerHTML: this.svgContent }) : h(\"div\", { class: \"illustration-inner\" })));\n  }\n  static get assetsDirs() { return [\"header-illustration\"]; }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"name\": [\"loadIllustration\"]\n  }; }\n};\nDidomiHeaderIllustration.style = didomiHeaderIllustrationCss;\n\nexport { DidomiHeaderIllustration as didomi_header_illustration };\n"],"names":["didomiHeaderIllustrationContent","Map","requests","validateContent","svgContent","div","document","createElement","innerHTML","svgElm","firstElementChild","nodeName","toLowerCase","isValid","elm","nodeType","i","attributes","length","val","value","indexOf","childNodes","DidomiHeaderIllustration","hostRef","_classCallCheck","registerInstance","this","isVisible","lazy","_createClass","key","_this","waitUntilVisible","el","loadIllustration","io","disconnect","undefined","rootMargin","cb","_this2","window","IntersectionObserver","data","isIntersecting","observe","_this3","name","url","concat","req","get","fetch","set","Promise","resolve","then","rsp","ok","text","getSvgContent","ariaLabel","ariaHidden","label","replace","h","Host","role","class","getElement","style"],"sourceRoot":""}